#!/usr/bin/env node

/**
 * Update Featured Recipes Script
 *
 * Fetches 2 recipes with images from each diet plan and updates featured-recipes.ts
 * This ensures consistent representation of all diet types in the recipe collection page.
 *
 * Usage: node scripts/update-featured-recipes.js
 */

require('dotenv').config({ path: '.env.local' });
const fs = require('fs');
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function updateFeaturedRecipes() {
  console.log('üîÑ Updating featured recipes from all diet plans...\n');

  // Get all diet plans
  const { data: dietPlans, error: dietError } = await supabase
    .from('diet_plans')
    .select('id, name, slug')
    .order('name');

  if (dietError) {
    console.error('‚ùå Error fetching diet plans:', dietError);
    process.exit(1);
  }

  console.log(`Found ${dietPlans.length} diet plans\n`);

  const allFeaturedRecipes = [];

  for (const plan of dietPlans) {
    console.log(`üìã Fetching recipes for: ${plan.name}...`);

    // Get all recipes for this diet plan
    const { data: recipes, error: recipesError } = await supabase
      .from('recipes')
      .select('*')
      .contains('diet_plans', [plan.id])
      .limit(100);  // Get more to find ones with images

    if (recipesError || !recipes || recipes.length === 0) {
      console.log(`   ‚ö†Ô∏è  No recipes found for ${plan.name}\n`);
      continue;
    }

    // Find recipes with images
    const recipesWithImages = [];

    for (const recipe of recipes) {
      if (recipesWithImages.length >= 2) break;

      // Check if recipe has an image
      const { data: images } = await supabase
        .from('images')
        .select('url')
        .eq('entity_type', 'recipe')
        .eq('entity_id', recipe.id)
        .eq('is_primary', true)
        .limit(1);

      if (images && images.length > 0 && images[0].url) {
        // Get nutrition data
        const { data: nutrition } = await supabase
          .from('recipe_nutrition')
          .select('*')
          .eq('recipe_id', recipe.id)
          .limit(1);

        recipesWithImages.push({
          id: recipe.id,
          name: recipe.name,
          description: recipe.description,
          prep_time: recipe.prep_time,
          cook_time: recipe.cook_time,
          servings: recipe.servings,
          difficulty: recipe.difficulty,
          image_url: images[0].url,
          diet_plan_names: [{ name: plan.name, slug: plan.slug }],
          recipe_nutrition: nutrition && nutrition.length > 0 ? [{
            fat: nutrition[0].fat,
            carbs: nutrition[0].carbs,
            fiber: nutrition[0].fiber,
            protein: nutrition[0].protein,
            calories: nutrition[0].calories
          }] : []
        });
      }
    }

    if (recipesWithImages.length > 0) {
      allFeaturedRecipes.push(...recipesWithImages);
      console.log(`   ‚úÖ Added ${recipesWithImages.length} recipes with images\n`);
    } else {
      console.log(`   ‚ö†Ô∏è  No recipes with images found for ${plan.name}\n`);
    }
  }

  console.log(`\nüìä Total featured recipes: ${allFeaturedRecipes.length}\n`);

  // Generate the TypeScript file
  const fileContent = `// Featured recipes for the recipes page
// ${allFeaturedRecipes.length} recipes from ${dietPlans.length} diet plans with images
// Auto-generated by scripts/update-featured-recipes.js

export const featuredRecipes = ${JSON.stringify(allFeaturedRecipes, null, 2)}
`;

  fs.writeFileSync('app/recipes/featured-recipes.ts', fileContent);
  console.log('‚úÖ Successfully updated app/recipes/featured-recipes.ts\n');

  // Print summary by diet plan
  console.log('üìã Summary by diet plan:');
  dietPlans.forEach(plan => {
    const count = allFeaturedRecipes.filter(r =>
      r.diet_plan_names.some(dp => dp.slug === plan.slug)
    ).length;
    console.log(`   ${plan.name}: ${count} recipes`);
  });

  console.log('\n‚ú® Done!\n');
}

updateFeaturedRecipes().catch(error => {
  console.error('‚ùå Error:', error);
  process.exit(1);
});
